/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.BINUserVerifyConfigRequest', null, global);
goog.exportSymbol('proto.BINUserVerifyConfigResponse', null, global);
goog.exportSymbol('proto.BINUserVerifyRequest', null, global);
goog.exportSymbol('proto.BINUserVerifyResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BINUserVerifyConfigRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BINUserVerifyConfigRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BINUserVerifyConfigRequest.displayName = 'proto.BINUserVerifyConfigRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BINUserVerifyConfigRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.BINUserVerifyConfigRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BINUserVerifyConfigRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.BINUserVerifyConfigRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BINUserVerifyConfigRequest}
 */
proto.BINUserVerifyConfigRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BINUserVerifyConfigRequest;
  return proto.BINUserVerifyConfigRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BINUserVerifyConfigRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BINUserVerifyConfigRequest}
 */
proto.BINUserVerifyConfigRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.BINUserVerifyConfigRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.BINUserVerifyConfigRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BINUserVerifyConfigRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.BINUserVerifyConfigRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(this, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * required int32 type = 1;
 * @return {number}
 */
proto.BINUserVerifyConfigRequest.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.BINUserVerifyConfigRequest.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.BINUserVerifyConfigRequest.prototype.clearType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINUserVerifyConfigRequest.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BINUserVerifyConfigResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BINUserVerifyConfigResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BINUserVerifyConfigResponse.displayName = 'proto.BINUserVerifyConfigResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BINUserVerifyConfigResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.BINUserVerifyConfigResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BINUserVerifyConfigResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.BINUserVerifyConfigResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    responsecode: jspb.Message.getField(msg, 1),
    message: jspb.Message.getField(msg, 2),
    userverified: jspb.Message.getField(msg, 3),
    verifiedphone: jspb.Message.getField(msg, 4),
    verifiedemail: jspb.Message.getField(msg, 5),
    verifiedsmssyntax: jspb.Message.getField(msg, 6),
    verifiedsmsnumber: jspb.Message.getField(msg, 7),
    verifiedsmscost: jspb.Message.getField(msg, 8),
    verifiedreward: jspb.Message.getField(msg, 9),
    unverifysmssyntax: jspb.Message.getField(msg, 10),
    unverifysmsnumber: jspb.Message.getField(msg, 11),
    unverifiedsmscost: jspb.Message.getField(msg, 12)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BINUserVerifyConfigResponse}
 */
proto.BINUserVerifyConfigResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BINUserVerifyConfigResponse;
  return proto.BINUserVerifyConfigResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BINUserVerifyConfigResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BINUserVerifyConfigResponse}
 */
proto.BINUserVerifyConfigResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setResponsecode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUserverified(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setVerifiedphone(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setVerifiedemail(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setVerifiedsmssyntax(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setVerifiedsmsnumber(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVerifiedsmscost(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVerifiedreward(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnverifysmssyntax(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnverifysmsnumber(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnverifiedsmscost(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.BINUserVerifyConfigResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.BINUserVerifyConfigResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BINUserVerifyConfigResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.BINUserVerifyConfigResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(this, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(this, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(this, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(this, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(this, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(this, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(this, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 8));
  if (f != null) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 9));
  if (f != null) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(this, 10));
  if (f != null) {
    writer.writeString(
      10,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(this, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 12));
  if (f != null) {
    writer.writeInt32(
      12,
      f
    );
  }
};


/**
 * required bool responseCode = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.BINUserVerifyConfigResponse.prototype.getResponsecode = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.BINUserVerifyConfigResponse.prototype.setResponsecode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.BINUserVerifyConfigResponse.prototype.clearResponsecode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINUserVerifyConfigResponse.prototype.hasResponsecode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.BINUserVerifyConfigResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.BINUserVerifyConfigResponse.prototype.setMessage = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.BINUserVerifyConfigResponse.prototype.clearMessage = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINUserVerifyConfigResponse.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool userVerified = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.BINUserVerifyConfigResponse.prototype.getUserverified = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.BINUserVerifyConfigResponse.prototype.setUserverified = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.BINUserVerifyConfigResponse.prototype.clearUserverified = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINUserVerifyConfigResponse.prototype.hasUserverified = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string verifiedPhone = 4;
 * @return {string}
 */
proto.BINUserVerifyConfigResponse.prototype.getVerifiedphone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.BINUserVerifyConfigResponse.prototype.setVerifiedphone = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.BINUserVerifyConfigResponse.prototype.clearVerifiedphone = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINUserVerifyConfigResponse.prototype.hasVerifiedphone = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string verifiedEmail = 5;
 * @return {string}
 */
proto.BINUserVerifyConfigResponse.prototype.getVerifiedemail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.BINUserVerifyConfigResponse.prototype.setVerifiedemail = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.BINUserVerifyConfigResponse.prototype.clearVerifiedemail = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINUserVerifyConfigResponse.prototype.hasVerifiedemail = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string verifiedSmsSyntax = 6;
 * @return {string}
 */
proto.BINUserVerifyConfigResponse.prototype.getVerifiedsmssyntax = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.BINUserVerifyConfigResponse.prototype.setVerifiedsmssyntax = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.BINUserVerifyConfigResponse.prototype.clearVerifiedsmssyntax = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINUserVerifyConfigResponse.prototype.hasVerifiedsmssyntax = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string verifiedSmsNumber = 7;
 * @return {string}
 */
proto.BINUserVerifyConfigResponse.prototype.getVerifiedsmsnumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.BINUserVerifyConfigResponse.prototype.setVerifiedsmsnumber = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.BINUserVerifyConfigResponse.prototype.clearVerifiedsmsnumber = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINUserVerifyConfigResponse.prototype.hasVerifiedsmsnumber = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional int32 verifiedSmsCost = 8;
 * @return {number}
 */
proto.BINUserVerifyConfigResponse.prototype.getVerifiedsmscost = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.BINUserVerifyConfigResponse.prototype.setVerifiedsmscost = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.BINUserVerifyConfigResponse.prototype.clearVerifiedsmscost = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINUserVerifyConfigResponse.prototype.hasVerifiedsmscost = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional int32 verifiedReward = 9;
 * @return {number}
 */
proto.BINUserVerifyConfigResponse.prototype.getVerifiedreward = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.BINUserVerifyConfigResponse.prototype.setVerifiedreward = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.BINUserVerifyConfigResponse.prototype.clearVerifiedreward = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINUserVerifyConfigResponse.prototype.hasVerifiedreward = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string unverifySmsSyntax = 10;
 * @return {string}
 */
proto.BINUserVerifyConfigResponse.prototype.getUnverifysmssyntax = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.BINUserVerifyConfigResponse.prototype.setUnverifysmssyntax = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.BINUserVerifyConfigResponse.prototype.clearUnverifysmssyntax = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINUserVerifyConfigResponse.prototype.hasUnverifysmssyntax = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional string unverifySmsNumber = 11;
 * @return {string}
 */
proto.BINUserVerifyConfigResponse.prototype.getUnverifysmsnumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.BINUserVerifyConfigResponse.prototype.setUnverifysmsnumber = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.BINUserVerifyConfigResponse.prototype.clearUnverifysmsnumber = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINUserVerifyConfigResponse.prototype.hasUnverifysmsnumber = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional int32 unverifiedSmsCost = 12;
 * @return {number}
 */
proto.BINUserVerifyConfigResponse.prototype.getUnverifiedsmscost = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.BINUserVerifyConfigResponse.prototype.setUnverifiedsmscost = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.BINUserVerifyConfigResponse.prototype.clearUnverifiedsmscost = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINUserVerifyConfigResponse.prototype.hasUnverifiedsmscost = function() {
  return jspb.Message.getField(this, 12) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BINUserVerifyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BINUserVerifyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BINUserVerifyRequest.displayName = 'proto.BINUserVerifyRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BINUserVerifyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.BINUserVerifyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BINUserVerifyRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.BINUserVerifyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    otp: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BINUserVerifyRequest}
 */
proto.BINUserVerifyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BINUserVerifyRequest;
  return proto.BINUserVerifyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BINUserVerifyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BINUserVerifyRequest}
 */
proto.BINUserVerifyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOtp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.BINUserVerifyRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.BINUserVerifyRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BINUserVerifyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.BINUserVerifyRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(this, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * required string otp = 1;
 * @return {string}
 */
proto.BINUserVerifyRequest.prototype.getOtp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.BINUserVerifyRequest.prototype.setOtp = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.BINUserVerifyRequest.prototype.clearOtp = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINUserVerifyRequest.prototype.hasOtp = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BINUserVerifyResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BINUserVerifyResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BINUserVerifyResponse.displayName = 'proto.BINUserVerifyResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BINUserVerifyResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.BINUserVerifyResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BINUserVerifyResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.BINUserVerifyResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    responsecode: jspb.Message.getField(msg, 1),
    message: jspb.Message.getField(msg, 2),
    userverified: jspb.Message.getField(msg, 3),
    verifiedphone: jspb.Message.getField(msg, 4),
    verifiedemail: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BINUserVerifyResponse}
 */
proto.BINUserVerifyResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BINUserVerifyResponse;
  return proto.BINUserVerifyResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BINUserVerifyResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BINUserVerifyResponse}
 */
proto.BINUserVerifyResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setResponsecode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUserverified(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setVerifiedphone(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setVerifiedemail(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.BINUserVerifyResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.BINUserVerifyResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BINUserVerifyResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.BINUserVerifyResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(this, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(this, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(this, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(this, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(this, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * required bool responseCode = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.BINUserVerifyResponse.prototype.getResponsecode = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.BINUserVerifyResponse.prototype.setResponsecode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.BINUserVerifyResponse.prototype.clearResponsecode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINUserVerifyResponse.prototype.hasResponsecode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.BINUserVerifyResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.BINUserVerifyResponse.prototype.setMessage = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.BINUserVerifyResponse.prototype.clearMessage = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINUserVerifyResponse.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool userVerified = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.BINUserVerifyResponse.prototype.getUserverified = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.BINUserVerifyResponse.prototype.setUserverified = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.BINUserVerifyResponse.prototype.clearUserverified = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINUserVerifyResponse.prototype.hasUserverified = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string verifiedPhone = 4;
 * @return {string}
 */
proto.BINUserVerifyResponse.prototype.getVerifiedphone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.BINUserVerifyResponse.prototype.setVerifiedphone = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.BINUserVerifyResponse.prototype.clearVerifiedphone = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINUserVerifyResponse.prototype.hasVerifiedphone = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string verifiedEmail = 5;
 * @return {string}
 */
proto.BINUserVerifyResponse.prototype.getVerifiedemail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.BINUserVerifyResponse.prototype.setVerifiedemail = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.BINUserVerifyResponse.prototype.clearVerifiedemail = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINUserVerifyResponse.prototype.hasVerifiedemail = function() {
  return jspb.Message.getField(this, 5) != null;
};


goog.object.extend(exports, proto);
