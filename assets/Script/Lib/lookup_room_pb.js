/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.BINLookUpRoomRequest', null, global);
goog.exportSymbol('proto.BINLookUpRoomResponse', null, global);
goog.exportSymbol('proto.BINRoomInfo', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BINLookUpRoomRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BINLookUpRoomRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BINLookUpRoomRequest.displayName = 'proto.BINLookUpRoomRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BINLookUpRoomRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.BINLookUpRoomRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BINLookUpRoomRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.BINLookUpRoomRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    zoneid: jspb.Message.getField(msg, 1),
    type: jspb.Message.getField(msg, 2),
    firstresult: jspb.Message.getField(msg, 3),
    maxresult: jspb.Message.getField(msg, 4),
    orderbyfield: jspb.Message.getField(msg, 5),
    asc: jspb.Message.getField(msg, 6),
    roomgroup: jspb.Message.getField(msg, 7)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BINLookUpRoomRequest}
 */
proto.BINLookUpRoomRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BINLookUpRoomRequest;
  return proto.BINLookUpRoomRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BINLookUpRoomRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BINLookUpRoomRequest}
 */
proto.BINLookUpRoomRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setZoneid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFirstresult(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxresult(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOrderbyfield(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAsc(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoomgroup(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.BINLookUpRoomRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.BINLookUpRoomRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BINLookUpRoomRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.BINLookUpRoomRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(this, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(this, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 7));
  if (f != null) {
    writer.writeInt32(
      7,
      f
    );
  }
};


/**
 * required int32 zoneId = 1;
 * @return {number}
 */
proto.BINLookUpRoomRequest.prototype.getZoneid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.BINLookUpRoomRequest.prototype.setZoneid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.BINLookUpRoomRequest.prototype.clearZoneid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINLookUpRoomRequest.prototype.hasZoneid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 type = 2;
 * @return {number}
 */
proto.BINLookUpRoomRequest.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.BINLookUpRoomRequest.prototype.setType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.BINLookUpRoomRequest.prototype.clearType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINLookUpRoomRequest.prototype.hasType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 firstResult = 3;
 * @return {number}
 */
proto.BINLookUpRoomRequest.prototype.getFirstresult = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.BINLookUpRoomRequest.prototype.setFirstresult = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.BINLookUpRoomRequest.prototype.clearFirstresult = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINLookUpRoomRequest.prototype.hasFirstresult = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 maxResult = 4;
 * @return {number}
 */
proto.BINLookUpRoomRequest.prototype.getMaxresult = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.BINLookUpRoomRequest.prototype.setMaxresult = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.BINLookUpRoomRequest.prototype.clearMaxresult = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINLookUpRoomRequest.prototype.hasMaxresult = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 orderByField = 5;
 * @return {number}
 */
proto.BINLookUpRoomRequest.prototype.getOrderbyfield = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.BINLookUpRoomRequest.prototype.setOrderbyfield = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.BINLookUpRoomRequest.prototype.clearOrderbyfield = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINLookUpRoomRequest.prototype.hasOrderbyfield = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool asc = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.BINLookUpRoomRequest.prototype.getAsc = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.BINLookUpRoomRequest.prototype.setAsc = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.BINLookUpRoomRequest.prototype.clearAsc = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINLookUpRoomRequest.prototype.hasAsc = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional int32 roomGroup = 7;
 * @return {number}
 */
proto.BINLookUpRoomRequest.prototype.getRoomgroup = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.BINLookUpRoomRequest.prototype.setRoomgroup = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.BINLookUpRoomRequest.prototype.clearRoomgroup = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINLookUpRoomRequest.prototype.hasRoomgroup = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BINRoomInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BINRoomInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BINRoomInfo.displayName = 'proto.BINRoomInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BINRoomInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.BINRoomInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BINRoomInfo} msg The msg instance to transform.
 * @return {!Object}
 */
proto.BINRoomInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomindex: jspb.Message.getField(msg, 1),
    minbet: jspb.Message.getField(msg, 2),
    minentermoney: jspb.Message.getField(msg, 3),
    playersize: jspb.Message.getField(msg, 4),
    playingplayer: jspb.Message.getField(msg, 5),
    isplaying: jspb.Message.getField(msg, 6),
    roomconfig: jspb.Message.getField(msg, 7)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BINRoomInfo}
 */
proto.BINRoomInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BINRoomInfo;
  return proto.BINRoomInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BINRoomInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BINRoomInfo}
 */
proto.BINRoomInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoomindex(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMinbet(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMinentermoney(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlayersize(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlayingplayer(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsplaying(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomconfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.BINRoomInfo} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.BINRoomInfo.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BINRoomInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.BINRoomInfo.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(this, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(this, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(this, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * required int32 roomIndex = 1;
 * @return {number}
 */
proto.BINRoomInfo.prototype.getRoomindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.BINRoomInfo.prototype.setRoomindex = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.BINRoomInfo.prototype.clearRoomindex = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINRoomInfo.prototype.hasRoomindex = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 minBet = 2;
 * @return {number}
 */
proto.BINRoomInfo.prototype.getMinbet = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.BINRoomInfo.prototype.setMinbet = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.BINRoomInfo.prototype.clearMinbet = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINRoomInfo.prototype.hasMinbet = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int64 minEnterMoney = 3;
 * @return {number}
 */
proto.BINRoomInfo.prototype.getMinentermoney = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.BINRoomInfo.prototype.setMinentermoney = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.BINRoomInfo.prototype.clearMinentermoney = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINRoomInfo.prototype.hasMinentermoney = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 playerSize = 4;
 * @return {number}
 */
proto.BINRoomInfo.prototype.getPlayersize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.BINRoomInfo.prototype.setPlayersize = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.BINRoomInfo.prototype.clearPlayersize = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINRoomInfo.prototype.hasPlayersize = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required int32 playingPlayer = 5;
 * @return {number}
 */
proto.BINRoomInfo.prototype.getPlayingplayer = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.BINRoomInfo.prototype.setPlayingplayer = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.BINRoomInfo.prototype.clearPlayingplayer = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINRoomInfo.prototype.hasPlayingplayer = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required bool isPlaying = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.BINRoomInfo.prototype.getIsplaying = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.BINRoomInfo.prototype.setIsplaying = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.BINRoomInfo.prototype.clearIsplaying = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINRoomInfo.prototype.hasIsplaying = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string roomConfig = 7;
 * @return {string}
 */
proto.BINRoomInfo.prototype.getRoomconfig = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.BINRoomInfo.prototype.setRoomconfig = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.BINRoomInfo.prototype.clearRoomconfig = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINRoomInfo.prototype.hasRoomconfig = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BINLookUpRoomResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.BINLookUpRoomResponse.repeatedFields_, null);
};
goog.inherits(proto.BINLookUpRoomResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BINLookUpRoomResponse.displayName = 'proto.BINLookUpRoomResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.BINLookUpRoomResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BINLookUpRoomResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.BINLookUpRoomResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BINLookUpRoomResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.BINLookUpRoomResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    responsecode: jspb.Message.getField(msg, 1),
    message: jspb.Message.getField(msg, 2),
    roominfosList: jspb.Message.toObjectList(msg.getRoominfosList(),
    proto.BINRoomInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BINLookUpRoomResponse}
 */
proto.BINLookUpRoomResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BINLookUpRoomResponse;
  return proto.BINLookUpRoomResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BINLookUpRoomResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BINLookUpRoomResponse}
 */
proto.BINLookUpRoomResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setResponsecode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = new proto.BINRoomInfo;
      reader.readMessage(value,proto.BINRoomInfo.deserializeBinaryFromReader);
      msg.addRoominfos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.BINLookUpRoomResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.BINLookUpRoomResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BINLookUpRoomResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.BINLookUpRoomResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(this, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(this, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getRoominfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.BINRoomInfo.serializeBinaryToWriter
    );
  }
};


/**
 * required bool responseCode = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.BINLookUpRoomResponse.prototype.getResponsecode = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.BINLookUpRoomResponse.prototype.setResponsecode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.BINLookUpRoomResponse.prototype.clearResponsecode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINLookUpRoomResponse.prototype.hasResponsecode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.BINLookUpRoomResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.BINLookUpRoomResponse.prototype.setMessage = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.BINLookUpRoomResponse.prototype.clearMessage = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINLookUpRoomResponse.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated BINRoomInfo roomInfos = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.BINRoomInfo>}
 */
proto.BINLookUpRoomResponse.prototype.getRoominfosList = function() {
  return /** @type{!Array.<!proto.BINRoomInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.BINRoomInfo, 3));
};


/** @param {!Array.<!proto.BINRoomInfo>} value */
proto.BINLookUpRoomResponse.prototype.setRoominfosList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.BINRoomInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.BINRoomInfo}
 */
proto.BINLookUpRoomResponse.prototype.addRoominfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.BINRoomInfo, opt_index);
};


proto.BINLookUpRoomResponse.prototype.clearRoominfosList = function() {
  this.setRoominfosList([]);
};


goog.object.extend(exports, proto);
