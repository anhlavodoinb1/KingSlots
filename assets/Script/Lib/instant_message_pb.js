/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.BINInstantMessage', null, global);
goog.exportSymbol('proto.BINInstantMessageHistoryRequest', null, global);
goog.exportSymbol('proto.BINInstantMessageHistoryResponse', null, global);
goog.exportSymbol('proto.BINInstantMessageRequest', null, global);
goog.exportSymbol('proto.BINInstantMessageResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BINInstantMessageRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BINInstantMessageRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BINInstantMessageRequest.displayName = 'proto.BINInstantMessageRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BINInstantMessageRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.BINInstantMessageRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BINInstantMessageRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.BINInstantMessageRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    scope: jspb.Message.getField(msg, 1),
    instantmessage: jspb.Message.getField(msg, 2),
    receiverusername: jspb.Message.getField(msg, 3),
    receiveruserid: jspb.Message.getField(msg, 4),
    textemoticonid: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BINInstantMessageRequest}
 */
proto.BINInstantMessageRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BINInstantMessageRequest;
  return proto.BINInstantMessageRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BINInstantMessageRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BINInstantMessageRequest}
 */
proto.BINInstantMessageRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setScope(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setInstantmessage(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setReceiverusername(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setReceiveruserid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTextemoticonid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.BINInstantMessageRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.BINInstantMessageRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BINInstantMessageRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.BINInstantMessageRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(this, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(this, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(this, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 4));
  if (f != null) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * required int32 scope = 1;
 * @return {number}
 */
proto.BINInstantMessageRequest.prototype.getScope = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.BINInstantMessageRequest.prototype.setScope = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.BINInstantMessageRequest.prototype.clearScope = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINInstantMessageRequest.prototype.hasScope = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string instantMessage = 2;
 * @return {string}
 */
proto.BINInstantMessageRequest.prototype.getInstantmessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.BINInstantMessageRequest.prototype.setInstantmessage = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.BINInstantMessageRequest.prototype.clearInstantmessage = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINInstantMessageRequest.prototype.hasInstantmessage = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string receiverUserName = 3;
 * @return {string}
 */
proto.BINInstantMessageRequest.prototype.getReceiverusername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.BINInstantMessageRequest.prototype.setReceiverusername = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.BINInstantMessageRequest.prototype.clearReceiverusername = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINInstantMessageRequest.prototype.hasReceiverusername = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int64 receiverUserId = 4;
 * @return {number}
 */
proto.BINInstantMessageRequest.prototype.getReceiveruserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.BINInstantMessageRequest.prototype.setReceiveruserid = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.BINInstantMessageRequest.prototype.clearReceiveruserid = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINInstantMessageRequest.prototype.hasReceiveruserid = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 textEmoticonId = 5;
 * @return {number}
 */
proto.BINInstantMessageRequest.prototype.getTextemoticonid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.BINInstantMessageRequest.prototype.setTextemoticonid = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.BINInstantMessageRequest.prototype.clearTextemoticonid = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINInstantMessageRequest.prototype.hasTextemoticonid = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BINInstantMessageResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BINInstantMessageResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BINInstantMessageResponse.displayName = 'proto.BINInstantMessageResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BINInstantMessageResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.BINInstantMessageResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BINInstantMessageResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.BINInstantMessageResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    responsecode: jspb.Message.getField(msg, 1),
    message: jspb.Message.getField(msg, 2),
    scope: jspb.Message.getField(msg, 3),
    senderusername: jspb.Message.getField(msg, 4),
    senderuserid: jspb.Message.getField(msg, 5),
    instantmessage: jspb.Message.getField(msg, 6),
    senttime: jspb.Message.getField(msg, 7),
    zoneid: jspb.Message.getField(msg, 8),
    roomindex: jspb.Message.getField(msg, 9),
    receiverusername: jspb.Message.getField(msg, 10),
    receiveruserid: jspb.Message.getField(msg, 11),
    textemoticonid: jspb.Message.getField(msg, 12),
    colorcode: jspb.Message.getField(msg, 13)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BINInstantMessageResponse}
 */
proto.BINInstantMessageResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BINInstantMessageResponse;
  return proto.BINInstantMessageResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BINInstantMessageResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BINInstantMessageResponse}
 */
proto.BINInstantMessageResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setResponsecode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setScope(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSenderusername(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSenderuserid(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setInstantmessage(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSenttime(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setZoneid(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoomindex(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setReceiverusername(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setReceiveruserid(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTextemoticonid(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setColorcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.BINInstantMessageResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.BINInstantMessageResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BINInstantMessageResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.BINInstantMessageResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(this, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(this, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(this, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 5));
  if (f != null) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(this, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 7));
  if (f != null) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 8));
  if (f != null) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 9));
  if (f != null) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(this, 10));
  if (f != null) {
    writer.writeString(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 11));
  if (f != null) {
    writer.writeInt64(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 12));
  if (f != null) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(this, 13));
  if (f != null) {
    writer.writeString(
      13,
      f
    );
  }
};


/**
 * required bool responseCode = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.BINInstantMessageResponse.prototype.getResponsecode = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.BINInstantMessageResponse.prototype.setResponsecode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.BINInstantMessageResponse.prototype.clearResponsecode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINInstantMessageResponse.prototype.hasResponsecode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.BINInstantMessageResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.BINInstantMessageResponse.prototype.setMessage = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.BINInstantMessageResponse.prototype.clearMessage = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINInstantMessageResponse.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 scope = 3;
 * @return {number}
 */
proto.BINInstantMessageResponse.prototype.getScope = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.BINInstantMessageResponse.prototype.setScope = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.BINInstantMessageResponse.prototype.clearScope = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINInstantMessageResponse.prototype.hasScope = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string senderUserName = 4;
 * @return {string}
 */
proto.BINInstantMessageResponse.prototype.getSenderusername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.BINInstantMessageResponse.prototype.setSenderusername = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.BINInstantMessageResponse.prototype.clearSenderusername = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINInstantMessageResponse.prototype.hasSenderusername = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int64 senderUserId = 5;
 * @return {number}
 */
proto.BINInstantMessageResponse.prototype.getSenderuserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.BINInstantMessageResponse.prototype.setSenderuserid = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.BINInstantMessageResponse.prototype.clearSenderuserid = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINInstantMessageResponse.prototype.hasSenderuserid = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string instantMessage = 6;
 * @return {string}
 */
proto.BINInstantMessageResponse.prototype.getInstantmessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.BINInstantMessageResponse.prototype.setInstantmessage = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.BINInstantMessageResponse.prototype.clearInstantmessage = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINInstantMessageResponse.prototype.hasInstantmessage = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional int64 sentTime = 7;
 * @return {number}
 */
proto.BINInstantMessageResponse.prototype.getSenttime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.BINInstantMessageResponse.prototype.setSenttime = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.BINInstantMessageResponse.prototype.clearSenttime = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINInstantMessageResponse.prototype.hasSenttime = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional int32 zoneId = 8;
 * @return {number}
 */
proto.BINInstantMessageResponse.prototype.getZoneid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.BINInstantMessageResponse.prototype.setZoneid = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.BINInstantMessageResponse.prototype.clearZoneid = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINInstantMessageResponse.prototype.hasZoneid = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional int32 roomIndex = 9;
 * @return {number}
 */
proto.BINInstantMessageResponse.prototype.getRoomindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.BINInstantMessageResponse.prototype.setRoomindex = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.BINInstantMessageResponse.prototype.clearRoomindex = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINInstantMessageResponse.prototype.hasRoomindex = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string receiverUserName = 10;
 * @return {string}
 */
proto.BINInstantMessageResponse.prototype.getReceiverusername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.BINInstantMessageResponse.prototype.setReceiverusername = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.BINInstantMessageResponse.prototype.clearReceiverusername = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINInstantMessageResponse.prototype.hasReceiverusername = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional int64 receiverUserId = 11;
 * @return {number}
 */
proto.BINInstantMessageResponse.prototype.getReceiveruserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.BINInstantMessageResponse.prototype.setReceiveruserid = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.BINInstantMessageResponse.prototype.clearReceiveruserid = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINInstantMessageResponse.prototype.hasReceiveruserid = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional int32 textEmoticonId = 12;
 * @return {number}
 */
proto.BINInstantMessageResponse.prototype.getTextemoticonid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.BINInstantMessageResponse.prototype.setTextemoticonid = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.BINInstantMessageResponse.prototype.clearTextemoticonid = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINInstantMessageResponse.prototype.hasTextemoticonid = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional string colorCode = 13;
 * @return {string}
 */
proto.BINInstantMessageResponse.prototype.getColorcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.BINInstantMessageResponse.prototype.setColorcode = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.BINInstantMessageResponse.prototype.clearColorcode = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINInstantMessageResponse.prototype.hasColorcode = function() {
  return jspb.Message.getField(this, 13) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BINInstantMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BINInstantMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BINInstantMessage.displayName = 'proto.BINInstantMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BINInstantMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.BINInstantMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BINInstantMessage} msg The msg instance to transform.
 * @return {!Object}
 */
proto.BINInstantMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    sendername: jspb.Message.getField(msg, 1),
    senderuserid: jspb.Message.getField(msg, 2),
    instantmessage: jspb.Message.getField(msg, 3),
    senttime: jspb.Message.getField(msg, 4),
    recipientname: jspb.Message.getField(msg, 5),
    recipientuserid: jspb.Message.getField(msg, 6),
    textemoticonid: jspb.Message.getField(msg, 7),
    colorcode: jspb.Message.getField(msg, 8)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BINInstantMessage}
 */
proto.BINInstantMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BINInstantMessage;
  return proto.BINInstantMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BINInstantMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BINInstantMessage}
 */
proto.BINInstantMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSendername(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSenderuserid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setInstantmessage(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSenttime(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecipientname(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRecipientuserid(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTextemoticonid(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setColorcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.BINInstantMessage} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.BINInstantMessage.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BINInstantMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.BINInstantMessage.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(this, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(this, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 4));
  if (f != null) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(this, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 6));
  if (f != null) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 7));
  if (f != null) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(this, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string senderName = 1;
 * @return {string}
 */
proto.BINInstantMessage.prototype.getSendername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.BINInstantMessage.prototype.setSendername = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.BINInstantMessage.prototype.clearSendername = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINInstantMessage.prototype.hasSendername = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 senderUserId = 2;
 * @return {number}
 */
proto.BINInstantMessage.prototype.getSenderuserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.BINInstantMessage.prototype.setSenderuserid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.BINInstantMessage.prototype.clearSenderuserid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINInstantMessage.prototype.hasSenderuserid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string instantMessage = 3;
 * @return {string}
 */
proto.BINInstantMessage.prototype.getInstantmessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.BINInstantMessage.prototype.setInstantmessage = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.BINInstantMessage.prototype.clearInstantmessage = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINInstantMessage.prototype.hasInstantmessage = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int64 sentTime = 4;
 * @return {number}
 */
proto.BINInstantMessage.prototype.getSenttime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.BINInstantMessage.prototype.setSenttime = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.BINInstantMessage.prototype.clearSenttime = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINInstantMessage.prototype.hasSenttime = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string recipientName = 5;
 * @return {string}
 */
proto.BINInstantMessage.prototype.getRecipientname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.BINInstantMessage.prototype.setRecipientname = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.BINInstantMessage.prototype.clearRecipientname = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINInstantMessage.prototype.hasRecipientname = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int64 recipientUserId = 6;
 * @return {number}
 */
proto.BINInstantMessage.prototype.getRecipientuserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.BINInstantMessage.prototype.setRecipientuserid = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.BINInstantMessage.prototype.clearRecipientuserid = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINInstantMessage.prototype.hasRecipientuserid = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional int32 textEmoticonId = 7;
 * @return {number}
 */
proto.BINInstantMessage.prototype.getTextemoticonid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.BINInstantMessage.prototype.setTextemoticonid = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.BINInstantMessage.prototype.clearTextemoticonid = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINInstantMessage.prototype.hasTextemoticonid = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string colorCode = 8;
 * @return {string}
 */
proto.BINInstantMessage.prototype.getColorcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.BINInstantMessage.prototype.setColorcode = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.BINInstantMessage.prototype.clearColorcode = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINInstantMessage.prototype.hasColorcode = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BINInstantMessageHistoryRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BINInstantMessageHistoryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BINInstantMessageHistoryRequest.displayName = 'proto.BINInstantMessageHistoryRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BINInstantMessageHistoryRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.BINInstantMessageHistoryRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BINInstantMessageHistoryRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.BINInstantMessageHistoryRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    scope: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BINInstantMessageHistoryRequest}
 */
proto.BINInstantMessageHistoryRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BINInstantMessageHistoryRequest;
  return proto.BINInstantMessageHistoryRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BINInstantMessageHistoryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BINInstantMessageHistoryRequest}
 */
proto.BINInstantMessageHistoryRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setScope(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.BINInstantMessageHistoryRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.BINInstantMessageHistoryRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BINInstantMessageHistoryRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.BINInstantMessageHistoryRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(this, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * required int32 scope = 1;
 * @return {number}
 */
proto.BINInstantMessageHistoryRequest.prototype.getScope = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.BINInstantMessageHistoryRequest.prototype.setScope = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.BINInstantMessageHistoryRequest.prototype.clearScope = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINInstantMessageHistoryRequest.prototype.hasScope = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BINInstantMessageHistoryResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.BINInstantMessageHistoryResponse.repeatedFields_, null);
};
goog.inherits(proto.BINInstantMessageHistoryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BINInstantMessageHistoryResponse.displayName = 'proto.BINInstantMessageHistoryResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.BINInstantMessageHistoryResponse.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BINInstantMessageHistoryResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.BINInstantMessageHistoryResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BINInstantMessageHistoryResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.BINInstantMessageHistoryResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    responsecode: jspb.Message.getField(msg, 1),
    message: jspb.Message.getField(msg, 2),
    scope: jspb.Message.getField(msg, 3),
    zoneid: jspb.Message.getField(msg, 4),
    roomindex: jspb.Message.getField(msg, 5),
    instantmessagesList: jspb.Message.toObjectList(msg.getInstantmessagesList(),
    proto.BINInstantMessage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BINInstantMessageHistoryResponse}
 */
proto.BINInstantMessageHistoryResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BINInstantMessageHistoryResponse;
  return proto.BINInstantMessageHistoryResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BINInstantMessageHistoryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BINInstantMessageHistoryResponse}
 */
proto.BINInstantMessageHistoryResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setResponsecode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setScope(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setZoneid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoomindex(value);
      break;
    case 6:
      var value = new proto.BINInstantMessage;
      reader.readMessage(value,proto.BINInstantMessage.deserializeBinaryFromReader);
      msg.addInstantmessages(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.BINInstantMessageHistoryResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.BINInstantMessageHistoryResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BINInstantMessageHistoryResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.BINInstantMessageHistoryResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(this, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(this, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = this.getInstantmessagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.BINInstantMessage.serializeBinaryToWriter
    );
  }
};


/**
 * required bool responseCode = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.BINInstantMessageHistoryResponse.prototype.getResponsecode = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.BINInstantMessageHistoryResponse.prototype.setResponsecode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.BINInstantMessageHistoryResponse.prototype.clearResponsecode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINInstantMessageHistoryResponse.prototype.hasResponsecode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.BINInstantMessageHistoryResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.BINInstantMessageHistoryResponse.prototype.setMessage = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.BINInstantMessageHistoryResponse.prototype.clearMessage = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINInstantMessageHistoryResponse.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 scope = 3;
 * @return {number}
 */
proto.BINInstantMessageHistoryResponse.prototype.getScope = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.BINInstantMessageHistoryResponse.prototype.setScope = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.BINInstantMessageHistoryResponse.prototype.clearScope = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINInstantMessageHistoryResponse.prototype.hasScope = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 zoneId = 4;
 * @return {number}
 */
proto.BINInstantMessageHistoryResponse.prototype.getZoneid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.BINInstantMessageHistoryResponse.prototype.setZoneid = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.BINInstantMessageHistoryResponse.prototype.clearZoneid = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINInstantMessageHistoryResponse.prototype.hasZoneid = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 roomIndex = 5;
 * @return {number}
 */
proto.BINInstantMessageHistoryResponse.prototype.getRoomindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.BINInstantMessageHistoryResponse.prototype.setRoomindex = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.BINInstantMessageHistoryResponse.prototype.clearRoomindex = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINInstantMessageHistoryResponse.prototype.hasRoomindex = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated BINInstantMessage instantMessages = 6;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.BINInstantMessage>}
 */
proto.BINInstantMessageHistoryResponse.prototype.getInstantmessagesList = function() {
  return /** @type{!Array.<!proto.BINInstantMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.BINInstantMessage, 6));
};


/** @param {!Array.<!proto.BINInstantMessage>} value */
proto.BINInstantMessageHistoryResponse.prototype.setInstantmessagesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.BINInstantMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.BINInstantMessage}
 */
proto.BINInstantMessageHistoryResponse.prototype.addInstantmessages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.BINInstantMessage, opt_index);
};


proto.BINInstantMessageHistoryResponse.prototype.clearInstantmessagesList = function() {
  this.setInstantmessagesList([]);
};


goog.object.extend(exports, proto);
