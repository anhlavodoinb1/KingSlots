/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.BINFilterRoomRequest', null, global);
goog.exportSymbol('proto.BINFilterRoomResponse', null, global);
goog.exportSymbol('proto.BINRoomPlay', null, global);
goog.exportSymbol('proto.BINRoomStatus', null, global);
goog.exportSymbol('proto.BINRoomStatusRequest', null, global);
goog.exportSymbol('proto.BINRoomStatusResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BINFilterRoomRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BINFilterRoomRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BINFilterRoomRequest.displayName = 'proto.BINFilterRoomRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BINFilterRoomRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.BINFilterRoomRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BINFilterRoomRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BINFilterRoomRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    zoneid: jspb.Message.getField(msg, 1),
    roomtype: jspb.Message.getField(msg, 2),
    firstresult: jspb.Message.getField(msg, 3),
    maxresult: jspb.Message.getField(msg, 4),
    orderbyfield: jspb.Message.getField(msg, 5),
    asc: jspb.Message.getField(msg, 6),
    roomgroup: jspb.Message.getField(msg, 7)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BINFilterRoomRequest}
 */
proto.BINFilterRoomRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BINFilterRoomRequest;
  return proto.BINFilterRoomRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BINFilterRoomRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BINFilterRoomRequest}
 */
proto.BINFilterRoomRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setZoneid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoomtype(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFirstresult(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxresult(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOrderbyfield(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAsc(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoomgroup(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BINFilterRoomRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BINFilterRoomRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BINFilterRoomRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BINFilterRoomRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt32(
      7,
      f
    );
  }
};


/**
 * required int32 zoneId = 1;
 * @return {number}
 */
proto.BINFilterRoomRequest.prototype.getZoneid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.BINFilterRoomRequest.prototype.setZoneid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.BINFilterRoomRequest.prototype.clearZoneid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINFilterRoomRequest.prototype.hasZoneid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 roomType = 2;
 * @return {number}
 */
proto.BINFilterRoomRequest.prototype.getRoomtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.BINFilterRoomRequest.prototype.setRoomtype = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.BINFilterRoomRequest.prototype.clearRoomtype = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINFilterRoomRequest.prototype.hasRoomtype = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 firstResult = 3;
 * @return {number}
 */
proto.BINFilterRoomRequest.prototype.getFirstresult = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.BINFilterRoomRequest.prototype.setFirstresult = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.BINFilterRoomRequest.prototype.clearFirstresult = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINFilterRoomRequest.prototype.hasFirstresult = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 maxResult = 4;
 * @return {number}
 */
proto.BINFilterRoomRequest.prototype.getMaxresult = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.BINFilterRoomRequest.prototype.setMaxresult = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.BINFilterRoomRequest.prototype.clearMaxresult = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINFilterRoomRequest.prototype.hasMaxresult = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 orderByField = 5;
 * @return {number}
 */
proto.BINFilterRoomRequest.prototype.getOrderbyfield = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.BINFilterRoomRequest.prototype.setOrderbyfield = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.BINFilterRoomRequest.prototype.clearOrderbyfield = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINFilterRoomRequest.prototype.hasOrderbyfield = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool asc = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.BINFilterRoomRequest.prototype.getAsc = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.BINFilterRoomRequest.prototype.setAsc = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.BINFilterRoomRequest.prototype.clearAsc = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINFilterRoomRequest.prototype.hasAsc = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional int32 roomGroup = 7;
 * @return {number}
 */
proto.BINFilterRoomRequest.prototype.getRoomgroup = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.BINFilterRoomRequest.prototype.setRoomgroup = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.BINFilterRoomRequest.prototype.clearRoomgroup = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINFilterRoomRequest.prototype.hasRoomgroup = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BINRoomPlay = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BINRoomPlay, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BINRoomPlay.displayName = 'proto.BINRoomPlay';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BINRoomPlay.prototype.toObject = function(opt_includeInstance) {
  return proto.BINRoomPlay.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BINRoomPlay} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BINRoomPlay.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomindex: jspb.Message.getField(msg, 1),
    roomname: jspb.Message.getField(msg, 2),
    roomid: jspb.Message.getField(msg, 3),
    roomgroupid: jspb.Message.getField(msg, 4),
    minbet: jspb.Message.getField(msg, 5),
    minentermoney: jspb.Message.getField(msg, 6),
    roomcapacity: jspb.Message.getField(msg, 7),
    enteringplayer: jspb.Message.getField(msg, 8),
    playersize: jspb.Message.getField(msg, 9),
    playingplayer: jspb.Message.getField(msg, 10),
    level: jspb.Message.getField(msg, 11),
    tax: jspb.Message.getField(msg, 12),
    ownerusername: jspb.Message.getField(msg, 13),
    viproom: jspb.Message.getField(msg, 14),
    passwordrequired: jspb.Message.getField(msg, 15),
    roomconfig: jspb.Message.getField(msg, 16)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BINRoomPlay}
 */
proto.BINRoomPlay.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BINRoomPlay;
  return proto.BINRoomPlay.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BINRoomPlay} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BINRoomPlay}
 */
proto.BINRoomPlay.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoomindex(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomname(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRoomid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoomgroupid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMinbet(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMinentermoney(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoomcapacity(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEnteringplayer(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlayersize(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlayingplayer(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLevel(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTax(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwnerusername(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setViproom(value);
      break;
    case 15:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPasswordrequired(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomconfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BINRoomPlay.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BINRoomPlay.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BINRoomPlay} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BINRoomPlay.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeString(
      13,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeBool(
      14,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeBool(
      15,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeString(
      16,
      f
    );
  }
};


/**
 * required int32 roomIndex = 1;
 * @return {number}
 */
proto.BINRoomPlay.prototype.getRoomindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.BINRoomPlay.prototype.setRoomindex = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.BINRoomPlay.prototype.clearRoomindex = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINRoomPlay.prototype.hasRoomindex = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string roomName = 2;
 * @return {string}
 */
proto.BINRoomPlay.prototype.getRoomname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.BINRoomPlay.prototype.setRoomname = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.BINRoomPlay.prototype.clearRoomname = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINRoomPlay.prototype.hasRoomname = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int64 roomId = 3;
 * @return {number}
 */
proto.BINRoomPlay.prototype.getRoomid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.BINRoomPlay.prototype.setRoomid = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.BINRoomPlay.prototype.clearRoomid = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINRoomPlay.prototype.hasRoomid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 roomGroupId = 4;
 * @return {number}
 */
proto.BINRoomPlay.prototype.getRoomgroupid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.BINRoomPlay.prototype.setRoomgroupid = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.BINRoomPlay.prototype.clearRoomgroupid = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINRoomPlay.prototype.hasRoomgroupid = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required int32 minBet = 5;
 * @return {number}
 */
proto.BINRoomPlay.prototype.getMinbet = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.BINRoomPlay.prototype.setMinbet = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.BINRoomPlay.prototype.clearMinbet = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINRoomPlay.prototype.hasMinbet = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required int64 minEnterMoney = 6;
 * @return {number}
 */
proto.BINRoomPlay.prototype.getMinentermoney = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.BINRoomPlay.prototype.setMinentermoney = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.BINRoomPlay.prototype.clearMinentermoney = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINRoomPlay.prototype.hasMinentermoney = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required int32 roomCapacity = 7;
 * @return {number}
 */
proto.BINRoomPlay.prototype.getRoomcapacity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.BINRoomPlay.prototype.setRoomcapacity = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.BINRoomPlay.prototype.clearRoomcapacity = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINRoomPlay.prototype.hasRoomcapacity = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * required int32 enteringPlayer = 8;
 * @return {number}
 */
proto.BINRoomPlay.prototype.getEnteringplayer = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.BINRoomPlay.prototype.setEnteringplayer = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.BINRoomPlay.prototype.clearEnteringplayer = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINRoomPlay.prototype.hasEnteringplayer = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * required int32 playerSize = 9;
 * @return {number}
 */
proto.BINRoomPlay.prototype.getPlayersize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.BINRoomPlay.prototype.setPlayersize = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.BINRoomPlay.prototype.clearPlayersize = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINRoomPlay.prototype.hasPlayersize = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * required int32 playingPlayer = 10;
 * @return {number}
 */
proto.BINRoomPlay.prototype.getPlayingplayer = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.BINRoomPlay.prototype.setPlayingplayer = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.BINRoomPlay.prototype.clearPlayingplayer = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINRoomPlay.prototype.hasPlayingplayer = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * required int32 level = 11;
 * @return {number}
 */
proto.BINRoomPlay.prototype.getLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.BINRoomPlay.prototype.setLevel = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.BINRoomPlay.prototype.clearLevel = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINRoomPlay.prototype.hasLevel = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * required int32 tax = 12;
 * @return {number}
 */
proto.BINRoomPlay.prototype.getTax = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.BINRoomPlay.prototype.setTax = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.BINRoomPlay.prototype.clearTax = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINRoomPlay.prototype.hasTax = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional string ownerUserName = 13;
 * @return {string}
 */
proto.BINRoomPlay.prototype.getOwnerusername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.BINRoomPlay.prototype.setOwnerusername = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.BINRoomPlay.prototype.clearOwnerusername = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINRoomPlay.prototype.hasOwnerusername = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * required bool vipRoom = 14;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.BINRoomPlay.prototype.getViproom = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 14, false));
};


/** @param {boolean} value */
proto.BINRoomPlay.prototype.setViproom = function(value) {
  jspb.Message.setField(this, 14, value);
};


proto.BINRoomPlay.prototype.clearViproom = function() {
  jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINRoomPlay.prototype.hasViproom = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * required bool passwordRequired = 15;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.BINRoomPlay.prototype.getPasswordrequired = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 15, false));
};


/** @param {boolean} value */
proto.BINRoomPlay.prototype.setPasswordrequired = function(value) {
  jspb.Message.setField(this, 15, value);
};


proto.BINRoomPlay.prototype.clearPasswordrequired = function() {
  jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINRoomPlay.prototype.hasPasswordrequired = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional string roomConfig = 16;
 * @return {string}
 */
proto.BINRoomPlay.prototype.getRoomconfig = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/** @param {string} value */
proto.BINRoomPlay.prototype.setRoomconfig = function(value) {
  jspb.Message.setField(this, 16, value);
};


proto.BINRoomPlay.prototype.clearRoomconfig = function() {
  jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINRoomPlay.prototype.hasRoomconfig = function() {
  return jspb.Message.getField(this, 16) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BINFilterRoomResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.BINFilterRoomResponse.repeatedFields_, null);
};
goog.inherits(proto.BINFilterRoomResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BINFilterRoomResponse.displayName = 'proto.BINFilterRoomResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.BINFilterRoomResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BINFilterRoomResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.BINFilterRoomResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BINFilterRoomResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BINFilterRoomResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    responsecode: jspb.Message.getField(msg, 1),
    message: jspb.Message.getField(msg, 2),
    roomplaysList: jspb.Message.toObjectList(msg.getRoomplaysList(),
    proto.BINRoomPlay.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BINFilterRoomResponse}
 */
proto.BINFilterRoomResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BINFilterRoomResponse;
  return proto.BINFilterRoomResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BINFilterRoomResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BINFilterRoomResponse}
 */
proto.BINFilterRoomResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setResponsecode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = new proto.BINRoomPlay;
      reader.readMessage(value,proto.BINRoomPlay.deserializeBinaryFromReader);
      msg.addRoomplays(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BINFilterRoomResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BINFilterRoomResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BINFilterRoomResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BINFilterRoomResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRoomplaysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.BINRoomPlay.serializeBinaryToWriter
    );
  }
};


/**
 * required bool responseCode = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.BINFilterRoomResponse.prototype.getResponsecode = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.BINFilterRoomResponse.prototype.setResponsecode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.BINFilterRoomResponse.prototype.clearResponsecode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINFilterRoomResponse.prototype.hasResponsecode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.BINFilterRoomResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.BINFilterRoomResponse.prototype.setMessage = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.BINFilterRoomResponse.prototype.clearMessage = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINFilterRoomResponse.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated BINRoomPlay roomPlays = 3;
 * @return {!Array.<!proto.BINRoomPlay>}
 */
proto.BINFilterRoomResponse.prototype.getRoomplaysList = function() {
  return /** @type{!Array.<!proto.BINRoomPlay>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.BINRoomPlay, 3));
};


/** @param {!Array.<!proto.BINRoomPlay>} value */
proto.BINFilterRoomResponse.prototype.setRoomplaysList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.BINRoomPlay=} opt_value
 * @param {number=} opt_index
 * @return {!proto.BINRoomPlay}
 */
proto.BINFilterRoomResponse.prototype.addRoomplays = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.BINRoomPlay, opt_index);
};


proto.BINFilterRoomResponse.prototype.clearRoomplaysList = function() {
  this.setRoomplaysList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BINRoomStatusRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.BINRoomStatusRequest.repeatedFields_, null);
};
goog.inherits(proto.BINRoomStatusRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BINRoomStatusRequest.displayName = 'proto.BINRoomStatusRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.BINRoomStatusRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BINRoomStatusRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.BINRoomStatusRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BINRoomStatusRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BINRoomStatusRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    zoneid: jspb.Message.getField(msg, 1),
    indexsList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BINRoomStatusRequest}
 */
proto.BINRoomStatusRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BINRoomStatusRequest;
  return proto.BINRoomStatusRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BINRoomStatusRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BINRoomStatusRequest}
 */
proto.BINRoomStatusRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setZoneid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addIndexs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BINRoomStatusRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BINRoomStatusRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BINRoomStatusRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BINRoomStatusRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getIndexsList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      2,
      f
    );
  }
};


/**
 * required int32 zoneId = 1;
 * @return {number}
 */
proto.BINRoomStatusRequest.prototype.getZoneid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.BINRoomStatusRequest.prototype.setZoneid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.BINRoomStatusRequest.prototype.clearZoneid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINRoomStatusRequest.prototype.hasZoneid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated int32 indexs = 2;
 * @return {!Array.<number>}
 */
proto.BINRoomStatusRequest.prototype.getIndexsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<number>} value */
proto.BINRoomStatusRequest.prototype.setIndexsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.BINRoomStatusRequest.prototype.addIndexs = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.BINRoomStatusRequest.prototype.clearIndexsList = function() {
  this.setIndexsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BINRoomStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BINRoomStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BINRoomStatus.displayName = 'proto.BINRoomStatus';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BINRoomStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.BINRoomStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BINRoomStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BINRoomStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomindex: jspb.Message.getField(msg, 1),
    minbet: jspb.Message.getField(msg, 2),
    minentermoney: jspb.Message.getField(msg, 3),
    playersize: jspb.Message.getField(msg, 4),
    playingplayer: jspb.Message.getField(msg, 5),
    passwordrequired: jspb.Message.getField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BINRoomStatus}
 */
proto.BINRoomStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BINRoomStatus;
  return proto.BINRoomStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BINRoomStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BINRoomStatus}
 */
proto.BINRoomStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoomindex(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMinbet(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMinentermoney(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlayersize(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlayingplayer(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPasswordrequired(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BINRoomStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BINRoomStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BINRoomStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BINRoomStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * required int32 roomIndex = 1;
 * @return {number}
 */
proto.BINRoomStatus.prototype.getRoomindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.BINRoomStatus.prototype.setRoomindex = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.BINRoomStatus.prototype.clearRoomindex = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINRoomStatus.prototype.hasRoomindex = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 minBet = 2;
 * @return {number}
 */
proto.BINRoomStatus.prototype.getMinbet = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.BINRoomStatus.prototype.setMinbet = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.BINRoomStatus.prototype.clearMinbet = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINRoomStatus.prototype.hasMinbet = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int64 minEnterMoney = 3;
 * @return {number}
 */
proto.BINRoomStatus.prototype.getMinentermoney = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.BINRoomStatus.prototype.setMinentermoney = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.BINRoomStatus.prototype.clearMinentermoney = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINRoomStatus.prototype.hasMinentermoney = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 playerSize = 4;
 * @return {number}
 */
proto.BINRoomStatus.prototype.getPlayersize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.BINRoomStatus.prototype.setPlayersize = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.BINRoomStatus.prototype.clearPlayersize = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINRoomStatus.prototype.hasPlayersize = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required int32 playingPlayer = 5;
 * @return {number}
 */
proto.BINRoomStatus.prototype.getPlayingplayer = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.BINRoomStatus.prototype.setPlayingplayer = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.BINRoomStatus.prototype.clearPlayingplayer = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINRoomStatus.prototype.hasPlayingplayer = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required bool passwordRequired = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.BINRoomStatus.prototype.getPasswordrequired = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.BINRoomStatus.prototype.setPasswordrequired = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.BINRoomStatus.prototype.clearPasswordrequired = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINRoomStatus.prototype.hasPasswordrequired = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BINRoomStatusResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.BINRoomStatusResponse.repeatedFields_, null);
};
goog.inherits(proto.BINRoomStatusResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BINRoomStatusResponse.displayName = 'proto.BINRoomStatusResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.BINRoomStatusResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BINRoomStatusResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.BINRoomStatusResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BINRoomStatusResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BINRoomStatusResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    responsecode: jspb.Message.getField(msg, 1),
    message: jspb.Message.getField(msg, 2),
    roomstatusesList: jspb.Message.toObjectList(msg.getRoomstatusesList(),
    proto.BINRoomStatus.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BINRoomStatusResponse}
 */
proto.BINRoomStatusResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BINRoomStatusResponse;
  return proto.BINRoomStatusResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BINRoomStatusResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BINRoomStatusResponse}
 */
proto.BINRoomStatusResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setResponsecode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = new proto.BINRoomStatus;
      reader.readMessage(value,proto.BINRoomStatus.deserializeBinaryFromReader);
      msg.addRoomstatuses(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BINRoomStatusResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BINRoomStatusResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BINRoomStatusResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BINRoomStatusResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRoomstatusesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.BINRoomStatus.serializeBinaryToWriter
    );
  }
};


/**
 * required bool responseCode = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.BINRoomStatusResponse.prototype.getResponsecode = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.BINRoomStatusResponse.prototype.setResponsecode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.BINRoomStatusResponse.prototype.clearResponsecode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINRoomStatusResponse.prototype.hasResponsecode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.BINRoomStatusResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.BINRoomStatusResponse.prototype.setMessage = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.BINRoomStatusResponse.prototype.clearMessage = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BINRoomStatusResponse.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated BINRoomStatus roomStatuses = 3;
 * @return {!Array.<!proto.BINRoomStatus>}
 */
proto.BINRoomStatusResponse.prototype.getRoomstatusesList = function() {
  return /** @type{!Array.<!proto.BINRoomStatus>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.BINRoomStatus, 3));
};


/** @param {!Array.<!proto.BINRoomStatus>} value */
proto.BINRoomStatusResponse.prototype.setRoomstatusesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.BINRoomStatus=} opt_value
 * @param {number=} opt_index
 * @return {!proto.BINRoomStatus}
 */
proto.BINRoomStatusResponse.prototype.addRoomstatuses = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.BINRoomStatus, opt_index);
};


proto.BINRoomStatusResponse.prototype.clearRoomstatusesList = function() {
  this.setRoomstatusesList([]);
};


goog.object.extend(exports, proto);
